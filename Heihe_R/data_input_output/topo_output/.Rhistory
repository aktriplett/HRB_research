#Use PathExtract to extract outputs along a flowpath
start=c(subbasin$summary[segment,2], subbasin$summary[segment,3])
streamline_old=PathExtract(input=travHS$dem, direction=travHS$direction, mask=lakemaskT, startpoint=start) #getting red error bar here but can't see error
slopesCalc=SlopeCalStan(dem=RivSmooth$dem.adj, mask=lakemaskT, direction=travHS$direction, minslope=1e-5, maxslope=1, dx=1000, dy=1000, secondaryTH=-1)
river.mask=subbasin$segments
river.mask[river.mask>0]=1
slopesCalc2=RivSlope(direction=travHS$direction, slopex=slopesCalc$slopex, slopey=slopesCalc$slopey, minslope=1e-4, RiverMask=river.mask, Remove.Sec=TRUE)
slopex=slopesCalc2$slopex
slopey=slopesCalc2$slopey
sxplot=slopex
sxplot[which(slopex==0)]=NA
syplot=slopey
syplot[which(slopey==0)]=NA
#plot
par(mfrow=c(1,2))
image.plot(sxplot)
image.plot(syplot)
nx=dim(slopex)[1]
ny=dim(slopex)[2]
slopexPF=slopeyPF=DEMPF=DIRPF=rep(0, nx*ny)
jj=1
for(j in 1:ny){
for(i in 1:nx){
slopexPF[jj]=slopex[i,j]
slopeyPF[jj]=slopey[i,j]
DEMPF[jj]=RivSmooth$dem.adj[i,j]
DIRPF[jj]=travHS$direction[i,j]
jj=jj+1
}
}
write.table( t(c(nx,ny,1)), "SlopeX.sa", append=F, row.names=F, col.names=F)
#write.table(slopexPF, fout, append=T, row.names=F, col.names=F)
write.table(slopexPF, "SlopeX.sa", append=T, row.names=F, col.names=F)
write.table( t(c(nx,ny,1)), "SlopeY.sa", append=F, row.names=F, col.names=F)
#write.table(slopeyPF, fout, append=T, row.names=F, col.names=F)
write.table(slopeyPF, "SlopeY.sa", append=T, row.names=F, col.names=F)
write.table( t(c(nx,ny,1)), "DEM.Processed.sa", append=F, row.names=F, col.names=F)
#write.table(DEMPF, fout, append=T, row.names=F, col.names=F)
write.table(DEMPF, "DEM.Processed.sa", append=T, row.names=F, col.names=F)
write.table( t(c(nx,ny,1)), "Flow.Direction.sa", append=F, row.names=F, col.names=F)
#write.table(DIRPF, fout, append=T, row.names=F, col.names=F)
write.table(DIRPF, "Flow.Direction.sa", append=T, row.names=F, col.names=F)
quartz()
#par(mfrow=c(2,2))
#image.plot(demT, main="Elevation")
#image.plot(maskT, main="Watershed Mask")
image.plot(channelT, main="River Network")
par(mfrow=c(1,2))
image.plot(subbasin$segments, main="Stream Segments")
image.plot(subbasin$subbasins, main="Sub basins")
View(travHS)
subbasin=CalcSubbasins(travHS$direction, area=area, mask=lakemaskT, riv_th=500, merge_th=0)
par(mfrow=c(1,2))
image.plot(subbasin$segments, main="Stream Segments")
image.plot(subbasin$subbasins, main="Sub basins")
RivSmooth=RiverSmooth(dem=travHS$dem, travHS$direction, mask=lakemaskT, river.summary=subbasin$summary, river.segments=subbasin$segments, bank.epsilon=0.1)
#plot the differences in the DEM along the hillslopes and the rivers
par(mfrow=c(1,3))
#calcualte elevation differences
dif=(RivSmooth$dem.adj-travHS$dem)
#mask out the river mask to plot differences along streams and on hillslopes separately
rivmask=subbasin$segments
rivmask[which(rivmask>0)]=1
hillmask=matrix(1, nrow=dim(rivmask)[1], ncol=dim(rivmask)[2])
hillmask[which(rivmask>0)]=0
difhill=dif*hillmask
difriv=dif*rivmask
#replacing 0s with NAs
dif[dif==0]=NA
difriv[difriv==0]=NA
difhill[difhill==0]=NA
#plot
image.plot(dif, main="All Elev. Difs", col=rainbow(21)) #col=viridis(21))
image.plot(difriv, main="Stream Cell Difs", col=rainbow(21)) #col=viridis(21))
#image(rivmask, breaks=c(0,0.5,1.5), col=rev(gray.colors(2)), add=F)
if(length(which(is.na(difhill)==F))>0){
image.plot(difhill, main="Non Stream Cell Difs", col=rainbow(21)) #col=viridis(21))
}
segment=25 #pick a stream segment to walk down from, change this number to see a different segment #5 looks like main stem
#Use PathExtract to extract outputs along a flowpath
start=c(subbasin$summary[segment,2], subbasin$summary[segment,3])
streamline_old=PathExtract(input=travHS$dem, direction=travHS$direction, mask=lakemaskT, startpoint=start) #getting red error bar here but can't see error
segment=5 #pick a stream segment to walk down from, change this number to see a different segment #5 looks like main stem
#Use PathExtract to extract outputs along a flowpath
start=c(subbasin$summary[segment,2], subbasin$summary[segment,3])
streamline_old=PathExtract(input=travHS$dem, direction=travHS$direction, mask=lakemaskT, startpoint=start) #getting red error bar here but can't see error
slopesCalc=SlopeCalStan(dem=RivSmooth$dem.adj, mask=lakemaskT, direction=travHS$direction, minslope=1e-5, maxslope=1, dx=1000, dy=1000, secondaryTH=-1)
slopex=slopesCalc2$slopex
slopey=slopesCalc2$slopey
sxplot=slopex
sxplot[which(slopex==0)]=NA
syplot=slopey
syplot[which(slopey==0)]=NA
#plot
par(mfrow=c(1,2))
image.plot(sxplot)
image.plot(syplot)
domain_mask = raster("domain_mask.tif")
ny=nrow(domain_mask)
nx=ncol(domain_mask)
mask_mat=t(domain_mask[,ny:1])
ny=nrow(mask_mat)
nx=ncol(mask_mat)
setwd("~/Documents/Heihe_Basin_Project/Heihe_R/data_output/topo_output")
##########################################
#Source Libraries and functions
##uncomment the devtools library and the install command if you need to install PriorityFlow
#library(devtools)
#install_github("lecondon/PriorityFlow", subdir="Rpkg")
library("fields")
library(PriorityFlow)
library("raster")
library("sp")
library("rgdal")
domain_mask = raster("domain_mask.tif")
ny=nrow(domain_mask)
nx=ncol(domain_mask)
mask_mat=t(domain_mask[,ny:1])
ny=nrow(mask_mat)
nx=ncol(mask_mat)
View(mask_mat)
domain_mask = raster("domain_mask.tif")
ny=nrow(domain_mask)
nx=ncol(domain_mask)
mask_mat=t(domain_mask[,ny:1])
View(mask_mat)
dim(mask_mat)
mask_mat=t(domain_mask[1:nx,ny:1])
dim(mask_mat)
dim(domain_mask)
mask_mat = raster("domain_mask.tif")
ny=nrow(mask_mat)
nx=ncol(mask_mat)
###Back
#Back borders occur where mask[y+1]-mask[y] is negative (i.e. the cell above is a zero and the cell is inside the mask, i.e. a 1)
back_mat=matrix(0, ncol=nx, nrow=ny)
back_mat[2:ny, ]=mask_mat[1:(ny-1), ] - mask_mat[2:ny, ]
back_mat[1,]=-1*mask_mat[1,] #the upper boundary of the top row
back_mat[back_mat>0]=0
back_mat=-1*back_mat
image.plot(t(back_mat[ny:1,]))
#Front
#Front borders occure where mask[y-1]-mask[y] is negative (i.e. the cell above is a zero and the cell is inside the mask, i.e. a 1)
front_mat=matrix(0, ncol=nx, nrow=ny)
front_mat[1:(ny-1), ]=mask_mat[2:ny, ] - mask_mat[1:(ny-1), ]
front_mat[ny,]=-1*mask_mat[ny,] #the lower boundary of the bottom row
front_mat[front_mat>0]=0
front_mat=-1*front_mat
image.plot(t(front_mat[ny:1,]))
#Left
#Left borders occure where mask[x-1]-mask[x] is negative
left_mat=matrix(0, ncol=nx, nrow=ny)
left_mat[,2:nx]=mask_mat[,1:(nx-1)] - mask_mat[,2:nx]
left_mat[,1]=-1*mask_mat[,1] #the left boundary of the first column
left_mat[left_mat>0]=0
left_mat=-1*left_mat
image.plot(t(left_mat[ny:1,]))
#Right
#Right borders occure where mask[x+1]-mask[x] is negative
right_mat=matrix(0, ncol=nx, nrow=ny)
right_mat[,1:(nx-1)]=mask_mat[,2:nx] - mask_mat[,1:(nx-1)]
right_mat[,nx]=-1*mask_mat[,nx] #the right boundary of the last column
right_mat[right_mat>0]=0
right_mat=-1*right_mat
image.plot(t(right_mat[ny:1,]))
#write out the patches in a PF format
left=right=front=back=rep(0, nx*ny)
jj=1
for(j in ny:1){
print(j)
for(i in 1:nx){
front[jj]=front_mat[j,i]
back[jj]=back_mat[j,i]
left[jj]=left_mat[j,i]
right[jj]=right_mat[j,i]
jj=jj+1
}
}
fout="../Solid_file/Left_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(left, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/Right_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(right, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/Front_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(front, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/Back_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(back, fout, append=T, row.names=F, col.names=F)
#write out the patches in a ASC
#note looping is different from PF start in upper left and loop down
leftA=rightA=frontA=backA=rep(0, nx*ny)
jj=1
for(j in 1:ny){
print(j)
for(i in 1:nx){
frontA[jj]=front_mat[j,i]
backA[jj]=back_mat[j,i]
leftA[jj]=left_mat[j,i]
rightA[jj]=right_mat[j,i]
jj=jj+1
}
}
header1=paste("ncols        ", nx, sep="")
header2=paste("nrows        ", ny, sep="")
header3="xllcorner    0.0"
header4="yllcorner    0.0"
header5="cellsize     1000.0"
header6="NODATA_value  0.0"
header=rbind(header1, header2, header3, header4, header5, header6)
fout="../Solid_file/Left_Border.asc"
write.table(header, fout, append=F, row.names=F, col.names=F, quote=F)
write.table(leftA, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/Right_Border.asc"
write.table(header, fout, append=F, row.names=F, col.names=F, quote=F)
write.table(rightA, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/Front_Border.asc"
write.table(header, fout, append=F, row.names=F, col.names=F, quote=F)
write.table(frontA, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/Back_Border.asc"
write.table(header, fout, append=F, row.names=F, col.names=F, quote=F)
write.table(backA, fout, append=T, row.names=F, col.names=F)
# Deal with top and bottom patches
# 3 = regular overland boundary
# 4 = River
# 6 = bottom
#come up with a river mask
rivermask=Areaclip
areath=50 #drainage area threshold for rivers
rivermask[rivermask<areath]=0
rivermask[rivermask>0]=1
rivermask=rivermask*Maskclip
image.plot(rivermask)
rivermask_mat=t(rivermask[,nyclip:1])
#top
top_mat=mask_mat*3
#top_mat[rivermask_mat==1]=4 #to make a top with rivers
image.plot(top_mat)
#bottom
bottom_mat=mask_mat*6
#write out the patches in a PF format
bottom=top=rep(0, nx*ny)
jj=1
for(j in ny:1){
print(j)
for(i in 1:nx){
bottom[jj]=bottom_mat[j,i]
top[jj]=top_mat[j,i]
jj=jj+1
}
}
fout="../Solid_file/Bottom_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(bottom, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/TopNoRiver_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(top, fout, append=T, row.names=F, col.names=F)
#write out the patches in a asc format
bottomA=topA=rep(0, nx*ny)
jj=1
for(j in 1:ny){
print(j)
for(i in 1:nx){
bottomA[jj]=bottom_mat[j,i]
topA[jj]=top_mat[j,i]
jj=jj+1
}
}
fout="../Solid_file/Bottom_Border.asc"
write.table( header, fout, append=F, row.names=F, col.names=F, quote=F)
write.table(bottomA, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/TopNoRiver_Border.asc"
write.table( header, fout, append=F, row.names=F, col.names=F, quote=F)
write.table(topA, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/Left_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(left, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/Right_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(right, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/Front_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(front, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/Back_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(back, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/Left_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
setwd("~/Documents/Heihe_Basin_Project/Heihe_R/data_output/topo_output")
#Change wd
setwd("/Users/amanda_triplett/Documents/HRB_research/make_solid_file")
fout="../Solid_file/Left_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(left, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/Right_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(right, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/Front_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(front, fout, append=T, row.names=F, col.names=F)
fout="../Solid_file/Back_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(back, fout, append=T, row.names=F, col.names=F)
###Back
#Back borders occur where mask[y+1]-mask[y] is negative (i.e. the cell above is a zero and the cell is inside the mask, i.e. a 1)
back_mat=matrix(0, ncol=nx, nrow=ny)
back_mat[2:ny, ]=mask_mat[1:(ny-1), ] - mask_mat[2:ny, ]
back_mat[1,]=-1*mask_mat[1,] #the upper boundary of the top row
back_mat[back_mat>0]=0
back_mat=-1*back_mat
image.plot(t(back_mat[ny:1,]))
#Front
#Front borders occure where mask[y-1]-mask[y] is negative (i.e. the cell above is a zero and the cell is inside the mask, i.e. a 1)
front_mat=matrix(0, ncol=nx, nrow=ny)
front_mat[1:(ny-1), ]=mask_mat[2:ny, ] - mask_mat[1:(ny-1), ]
front_mat[ny,]=-1*mask_mat[ny,] #the lower boundary of the bottom row
front_mat[front_mat>0]=0
front_mat=-1*front_mat
image.plot(t(front_mat[ny:1,]))
#Left
#Left borders occure where mask[x-1]-mask[x] is negative
left_mat=matrix(0, ncol=nx, nrow=ny)
left_mat[,2:nx]=mask_mat[,1:(nx-1)] - mask_mat[,2:nx]
left_mat[,1]=-1*mask_mat[,1] #the left boundary of the first column
left_mat[left_mat>0]=0
left_mat=-1*left_mat
image.plot(t(left_mat[ny:1,]))
#Right
#Right borders occure where mask[x+1]-mask[x] is negative
right_mat=matrix(0, ncol=nx, nrow=ny)
right_mat[,1:(nx-1)]=mask_mat[,2:nx] - mask_mat[,1:(nx-1)]
right_mat[,nx]=-1*mask_mat[,nx] #the right boundary of the last column
right_mat[right_mat>0]=0
right_mat=-1*right_mat
image.plot(t(right_mat[ny:1,]))
#write out the patches in a PF format
left=right=front=back=rep(0, nx*ny)
jj=1
for(j in ny:1){
print(j)
for(i in 1:nx){
front[jj]=front_mat[j,i]
back[jj]=back_mat[j,i]
left[jj]=left_mat[j,i]
right[jj]=right_mat[j,i]
jj=jj+1
}
}
#Change wd
setwd("/Users/amanda_triplett/Documents/HRB_research/make_solid_file")
fout="/Solid_file/Left_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(left, fout, append=T, row.names=F, col.names=F)
fout="Solid_file/Left_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(left, fout, append=T, row.names=F, col.names=F)
fout="Solid_file/Right_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(right, fout, append=T, row.names=F, col.names=F)
fout="Solid_file/Front_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(front, fout, append=T, row.names=F, col.names=F)
fout="Solid_file/Back_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(back, fout, append=T, row.names=F, col.names=F)
#write out the patches in a ASC
#note looping is different from PF start in upper left and loop down
leftA=rightA=frontA=backA=rep(0, nx*ny)
jj=1
for(j in 1:ny){
print(j)
for(i in 1:nx){
frontA[jj]=front_mat[j,i]
backA[jj]=back_mat[j,i]
leftA[jj]=left_mat[j,i]
rightA[jj]=right_mat[j,i]
jj=jj+1
}
}
header1=paste("ncols        ", nx, sep="")
header2=paste("nrows        ", ny, sep="")
header3="xllcorner    0.0"
header4="yllcorner    0.0"
header5="cellsize     1000.0"
header6="NODATA_value  0.0"
header=rbind(header1, header2, header3, header4, header5, header6)
fout="Solid_file/Left_Border.asc"
write.table(header, fout, append=F, row.names=F, col.names=F, quote=F)
write.table(leftA, fout, append=T, row.names=F, col.names=F)
fout="Solid_file/Right_Border.asc"
write.table(header, fout, append=F, row.names=F, col.names=F, quote=F)
write.table(rightA, fout, append=T, row.names=F, col.names=F)
fout="Solid_file/Front_Border.asc"
write.table(header, fout, append=F, row.names=F, col.names=F, quote=F)
write.table(frontA, fout, append=T, row.names=F, col.names=F)
fout="Solid_file/Back_Border.asc"
write.table(header, fout, append=F, row.names=F, col.names=F, quote=F)
write.table(backA, fout, append=T, row.names=F, col.names=F)
#top
top_mat=mask_mat*3
#top_mat[rivermask_mat==1]=4 #to make a top with rivers
image.plot(top_mat)
#top_mat[rivermask_mat==1]=4 #to make a top with rivers
image.plot(top_mat)
#bottom
bottom_mat=mask_mat*6
#write out the patches in a PF format
bottom=top=rep(0, nx*ny)
jj=1
for(j in ny:1){
print(j)
for(i in 1:nx){
bottom[jj]=bottom_mat[j,i]
top[jj]=top_mat[j,i]
jj=jj+1
}
}
fout="Solid_file/Bottom_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(bottom, fout, append=T, row.names=F, col.names=F)
fout="Solid_file/TopNoRiver_Border.sa"
write.table( t(c(nx,ny,1)), fout, append=F, row.names=F, col.names=F)
write.table(top, fout, append=T, row.names=F, col.names=F)
#write out the patches in a asc format
bottomA=topA=rep(0, nx*ny)
jj=1
for(j in 1:ny){
print(j)
for(i in 1:nx){
bottomA[jj]=bottom_mat[j,i]
topA[jj]=top_mat[j,i]
jj=jj+1
}
}
View(right_mat)
View(back_mat)
View(right_mat)
View(right_mat)
View(back_mat)
View(right_mat)
range(right_mat)
fout="Solid_file/Bottom_Border.asc"
write.table( header, fout, append=F, row.names=F, col.names=F, quote=F)
write.table(bottomA, fout, append=T, row.names=F, col.names=F)
fout="Solid_file/TopNoRiver_Border.asc"
write.table( header, fout, append=F, row.names=F, col.names=F, quote=F)
write.table(topA, fout, append=T, row.names=F, col.names=F)
image.plot(t(front_mat[ny:1,]))
image.plot(t(front_mat[ny:1,]))
range(front_mat)
range(back_mat)
range(left_mat)
range(right_mat)
range(top_mat)
range(front)
range(back)
range(left)
range(right)
range(top)
range(bottom)
range(frontA)
range(backA)
range(leftA)
range(rightA)
View(back_mat)
image.plot(t(left_mat[ny:1,]))
image.plot(t(front_mat[ny:1,]))
mask_mat=t(mask_mat[1:nx,ny:1])
mask_mat=t(mask_mat[,ny:1])
###Back
#Back borders occur where mask[y+1]-mask[y] is negative (i.e. the cell above is a zero and the cell is inside the mask, i.e. a 1)
back_mat=matrix(0, ncol=nx, nrow=ny)
back_mat[2:ny, ]=mask_mat[1:(ny-1), ] - mask_mat[2:ny, ]
dim(mask_mat)
##########################################
# Inputs
domain_mask = raster("domain_mask.tif")
setwd("~/Documents/Heihe_Basin_Project/Heihe_R/data_output/topo_output")
##########################################
# Inputs
domain_mask = raster("domain_mask.tif")
ny=nrow(domain_mask)
nx=ncol(domain_mask)
mask_mat=t(domain_mask[,ny:1])
dim(mask_mat)
##########################################
# Inputs
domain_mask = raster("domain_mask.tif")
#ny=nrow(domain_mask)
#nx=ncol(domain_mask)
mask_mat=flip(domain_mask, direction='y')
dim(mask_mat)
dim(domain_mask)
image.plot(mask_mat)
plot(mask_mat)
ny=nrow(mask_mat)
nx=ncol(mask_mat)
back_mat=matrix(0, ncol=nx, nrow=ny)
back_mat[2:ny, ]=mask_mat[1:(ny-1), ] - mask_mat[2:ny, ]
back_mat[1,]=-1*mask_mat[1,] #the upper boundary of the top row
back_mat[back_mat>0]=0
back_mat=-1*back_mat
image.plot(t(back_mat[ny:1,]))
#Front
#Front borders occure where mask[y-1]-mask[y] is negative (i.e. the cell above is a zero and the cell is inside the mask, i.e. a 1)
front_mat=matrix(0, ncol=nx, nrow=ny)
front_mat[1:(ny-1), ]=mask_mat[2:ny, ] - mask_mat[1:(ny-1), ]
front_mat[ny,]=-1*mask_mat[ny,] #the lower boundary of the bottom row
front_mat[front_mat>0]=0
front_mat=-1*front_mat
image.plot(t(front_mat[ny:1,]))
