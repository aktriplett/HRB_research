View(layer_five_geo)
View(layer_three_geo)
View(layer_two_geo)
View(layer_one_geo)
View(layer_surface)
##Subtracting and finding the thickness of layers
#surface-layer_One
surf_one_diff = layer_surface-layer_one
plot(surf_one_diff,
main = "Diff between Layer One and Surface")
##Subtracting and finding the thickness of layers
#surface-layer_One
surf_one_diff = layer_surface-layer_one
plot(one_thick,
main = "Diff between Layer One and Surface")
#layer_one-layer_two
two_thick = layer_one-layer_two
plot(two_thick,
main = "Layer two thick")
#layer_two-layer_three
three_thick = layer_two-layer_three
plot(three_thick,
main = "Layer three thick")
#layer_three-layer_four
four_thick = layer_three-layer_four
plot(four_thick,
main = "Layer four thick")
#layer_four-layer_five
five_thick = layer_four-layer_five
plot(five_thick,
main = "Layer five thick")
total_thick = layer_surface - layer_five
plot(total_thick,
main = "Total Thickness")
cuts=c(0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200)
plot(total_thick,breaks = cuts,
main = "Total Thickness")
plot(total_thick,breaks = cuts, col = rainbow(23)
main = "Total Thickness")
plot(total_thick,breaks = cuts, col = rainbow(23),
main = "Total Thickness")
plot(total_thick,breaks = cuts, col = rainbow(24),
main = "Total Thickness")
cuts=c(0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400)
plot(total_thick,breaks = cuts, col = rainbow(24),
main = "Total Thickness")
View(total_thick)
cuts=c(0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100)
plot(total_thick,breaks = cuts, col = rainbow(21),
main = "Total Thickness")
cuts=c(0.05,.07,.09,.11,.13,.15,.17,.19,.21,.23,.25,.27,.29,.31,.33,.35)
plot(layer_one_SY, breaks = cuts, col = rainbow(16),
main = "SY Layer One - HRB")
View(layer_one_SS)
plot(layer_one_SS, col = rainbow,
main = "SS Layer One - HRB")
plot(layer_one_SS,
main = "SS Layer One - HRB")
View(layer_one_K)
cuts3=c(0.2,.3,.4,.5,.6,.7,.8,.9,1,1.5,2,2.5,3,3.5,4,4.5,5,10,15,20,25,50,75,100,125,150)
plot(layer_one_K, breaks = cuts3, col = rainbow(26),
main = "HK Layer One - HRB")
cuts3=c(0,0.2,.5,.7,.8,.9,1,1.5,2,2.5,3,3.5,4,4.5,5,10,15,20,25,50,75,100,125,150)
plot(layer_one_K, breaks = cuts3, col = rainbow(26),
main = "HK Layer One - HRB")
cuts3=c(0,0.2,.5,.7,.8,.9,1,1.5,2,2.5,3,3.5,4,4.5,5,10,15,20,25,50,75,100,125,150)
plot(layer_one_K, breaks = cuts3, col = rainbow(24),
main = "HK Layer One - HRB")
cuts3=c(0,0.2,.5,1,1.5,2,2.5,3,3.5,4,4.5,5,10,15,20,25,50,75,100,125,150)
plot(layer_one_K, breaks = cuts3, col = rainbow(21),
main = "HK Layer One - HRB")
cuts3=c(0,0.2,.5,1,1.5,2,2.5,3,3.5,4,4.5,5,6,7,8,9,10,15,20,25,50,75,100,125,150)
plot(layer_one_K, breaks = cuts3, col = rainbow(25),
main = "HK Layer One - HRB")
cuts1=c(0.05,.07,.09,.11,.13,.15,.17,.19,.21,.23,.25,.27,.29,.31,.33,.35)
plot(layer_one_SY, breaks = cuts1, col = rainbow(16),
main = "SY Layer One - HRB")
plot(total_thick,breaks = cuts, col = rainbow(21),
main = "Total Thickness")
cuts=c(0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100)
plot(total_thick,breaks = cuts, col = rainbow(21),
main = "Total Thickness")
View(total_thick)
soil_map = raster(x = "//Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/General/Soil/soil_map.tif")
SM = plot(soil_map)
View(soil_map)
SM = plot(soil_map, col = rainbow(15))
plot(layer_one_SY, breaks = cuts1, col = rainbow(10),
main = "SY Layer One - HRB")
SM = plot(soil_map, col = rainbow(15))
SM = plot(soil_map, col = rainbow(10))
cuts3=c(0,0.2,.5,1,1.5,2,2.5,3,3.5,4,4.5,5,6,7,8,9,10,15,20,25,50,75,100,125,150)
plot(layer_one_K, breaks = cuts3, col = rainbow(25),
main = "HK Layer One - HRB")
##Subtracting and finding the thickness of layers
#surface-layer_One
surf_one_diff = layer_surface-layer_one
plot(one_thick,
main = "Diff between Layer One and Surface")
##Subtracting and finding the thickness of layers
#surface-layer_One
one_thick = layer_surface-layer_one
plot(one_thick,
main = "Diff between Layer One and Surface")
View(one_thick)
View(two_thick)
View(three_thick)
View(four_thick)
View(five_thick)
five_thick@data@values
load("~/Heihe_subsurface/runname_list.RData")
library(raster)
library(rgdal)
library(sf)
library(tidyverse)
#model_grid = readOGR('/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Grid/Model_Grid.shp')
#elevation_info = model_grid@data[["Elevation"]]
#elevation_info = unique(elevation_info)
#elevation_info = sort(elevation_info)
#Model Grid only covers DEM (min 889, max 3884)
model_grid = st_read('/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Grid/Model_Grid.shp')
#Create a list of runnames
list_length = 843
runname_list = vector(mode = "list",length = list_length)
for (i in 1:843){
runname_list[[i]] = model_grid
}
#counter = 0
#for (i in seq(2,1686,2)){
#counter = counter + 1
#runname_list[[counter]] %>%
#transmute(Elevation, Elevation = Elevation - i)
#}
counter = 0
for (i in seq(2,1686,2)){
counter = counter + 1
runname_list[[counter]][7] = runname_list[[counter]][7] - i
print(i)
}
#counter = -1
#for (i in seq(150,1686,2)){
#counter = counter + 1
#for (j in 1:90589){
#runname_list[[counter]][j,7] = model_grid[j,7]-i
#}
#print(i)
#}
#lapply(runname_list,transform,Elevation = Elevation)
run_list = read.list(file="runname_list.RData")
layer_one_K = raster(x = "/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Hydrogeology /hydraulic conductivity/HK/HK layer1.tif")
layer_two_K= raster(x = "/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Hydrogeology /hydraulic conductivity/HK/HK layer2.tif")
layer_three_K = raster(x = "/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Hydrogeology /hydraulic conductivity/HK/HK layer3.tif")
layer_four_K = raster(x = "/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Hydrogeology /hydraulic conductivity/HK/HK layer4.tif")
layer_five_K = raster(x = "/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Hydrogeology /hydraulic conductivity/HK/HK layer5.tif")
View(layer_three_K)
View(layer_two_K)
install.packages("fields")
library(raster)
library(rgdal)
layer_one_K = raster(x = "/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Hydrogeology /hydraulic conductivity/HK/HK layer1.tif")
library(raster)
library(rgdal)
layer_one_K = raster(x = "/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Hydrogeology /hydraulic conductivity/HK/HK layer1.tif")
val = sort(unique(layer_one_K))
View(layer_one_K)
int = matrix(0,548,404)
View(int)
layer_one_K
val
for (n in 1:length(val)){ #loops 33 times through all unique k-values
temp = which(layer_one_K == val(n)) ##which cells of layer 1 = current k value
int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
k_vals = sort(unique(layer_one_K)) #get a list of unique k-values
for (n in 1:length(val)){ #loops 33 times through all unique k-values
temp = which(layer_one_K == k_vals(n)) ##which cells of layer 1 = current k value
int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
for (n in 1:length(val)){ #loops 33 times through all unique k-values
temp = which(layer_one_K == k_vals[n]) ##which cells of layer 1 = current k value
int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
for (n in 1:length(val)){ #loops 33 times through all unique k-values
int[layer_one_K == val[n]] = n
#temp = which(layer_one_K == k_vals[n]) ##which cells of layer 1 = current k value
#int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
layer_one_K@data
layer_one_K
for (n in 1:length(val)){ #loops 33 times through all unique k-values
int[layer_one_K[values] == val[n]] = n
#temp = which(layer_one_K == k_vals[n]) ##which cells of layer 1 = current k value
#int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
layer_one_K[values]
layer_one_K[,3]
layer_one_K[,7]
colnames(layer_one_K)
for (n in 1:length(k_vals)){ #loops 33 times through all unique k-values
int[layer_one_K[values] == val[n]] = n
#temp = which(layer_one_K == k_vals[n]) ##which cells of layer 1 = current k value
#int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
layer_one_K
layer_one_K(values)
layer_one_K["values"]
layer_one_K@values
slotNames(layer_one_K)
slotNames(layer_one_K@data)
?which
for (n in 1:length(k_vals)){ #loops 33 times through all unique k-values
#int[layer_one_K[values] == val[n]] = n
temp = which(layer_one_K == k_vals[n]) ##which cells of layer 1 = current k value
#int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
unique(layer_one_K)
?get
levels(layer_one_K)
?raster::levels
raster::levels(layer_one_K)
getValues(layer_one_K, row = 10)
layer_one_K = raster(x = "/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Hydrogeology /hydraulic conductivity/HK/HK layer1.tif")
getValues(layer_one_K, row = 10)
for (n in 1:length(k_vals)){ #loops 33 times through all unique k-values
#int[layer_one_K[values] == val[n]] = n
temp = which(layer_one_K@data == k_vals[n]) ##which cells of layer 1 = current k value
#int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
layer_one_K
values(layer_one_K)
layer_one_K(1,1)
layer_one_K[1,1]
readAll(layer_one_K)
val = sort(unique(layer_one_K)) #get a list of unique k-values
int = matrix(0,548,404) #create a matrix that's same dim as domain
for (n in 1:length(val)){ #loops 33 times through all unique k-values
#int[layer_one_K[values] == val[n]] = n
temp = which(layer_one_K == val[n]) ##which cells of layer 1 = current k value
#int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
for (n in 1:length(val)){ #loops 33 times through all unique k-values
#int[layer_one_K[values] == val[n]] = n
temp = which(layer_one_K@values == val[n]) ##which cells of layer 1 = current k value
#int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
for (n in 1:length(val)){ #loops 33 times through all unique k-values
#int[layer_one_K[values] == val[n]] = n
temp = which(layer_one_K@data@values == val[n]) ##which cells of layer 1 = current k value
#int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
for (n in 1:length(val)){ #loops 33 times through all unique k-values
#int[layer_one_K[values] == val[n]] = n
temp = which(layer_one_K = val[n]) ##which cells of layer 1 = current k value
#int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
for (n in 1:length(val)){ #loops 33 times through all unique k-values
#int[layer_one_K[values] == val[n]] = n
temp = which(as.vector(layer_one_K) == val[n]) ##which cells of layer 1 = current k value
int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
View(int)
int = matrix(0,548,404) #create a matrix that's same dim as domain
for (n in 1:length(val)){ #loops 33 times through all unique k-values
#int[layer_one_K[values] == val[n]] = n
temp = which(as.matrix(layer_one_K) == val[n]) ##which cells of layer 1 = current k value
int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
View(int)
for (n in 1:length(val)){
temp2 = layer_one_K - layer_one_K[int == n]
}
for (n in 1:length(val)){
temp2 = layer_one_K - layer_one_K[int == n]
print(range(temp))
}
View(temp2)
View(layer_one_K)
View(int)
nval
n(val)
##Check
for (n in 1:length(val)){
temp2 = layer_one_K - layer_one_K[int == n]
print(range(temp2))
}
##Check
for (n in 1:length(val)){
temp2 = as.matrix(layer_one_K) - as.matrix(layer_one_K[int == n])
print(range(temp2))
}
layer_one_K[int == 1]
as.matrix(layer_one_K[int == 1])
View(layer_one_K)
View(int)
library(raster)
library(rgdal)
layer_one_K = raster(x = "/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Hydrogeology /hydraulic conductivity/HK/HK layer1.tif")
val = sort(unique(layer_one_K)) #get a list of unique k-values
int = matrix(0,548,404) #create a matrix that's same dim as domain
for (n in 1:length(val)){ #loops 33 times through all unique k-values
int[as.matrix(layer_one_K) == val[n]] = n
#temp = which(as.matrix(layer_one_K) == val[n]) ##which cells of layer 1 = current k value
#int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
View(int)
library(raster)
library(rgdal)
layer_one_K = raster(x = "/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Hydrogeology /hydraulic conductivity/HK/HK layer1.tif")
val = sort(unique(layer_one_K)) #get a list of unique k-values
int = matrix(0,548,404) #create a matrix that's same dim as domain
for (n in 1:length(val)){ #loops 33 times through all unique k-values
#int[as.matrix(layer_one_K) == val[n]] = n
temp = which(as.matrix(layer_one_K) == val[n]) ##which cells of layer 1 = current k value
int[temp] = n ##current temp (all cells that = current n) added to int matrix
}
View(int)
layer_one_K = raster(x = "/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Hydrogeology /hydraulic conductivity/HK/HK layer1.tif")
layer_two_K= raster(x = "/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Hydrogeology /hydraulic conductivity/HK/HK layer2.tif")
layer_three_K = raster(x = "/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Hydrogeology /hydraulic conductivity/HK/HK layer3.tif")
layer_four_K = raster(x = "/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Hydrogeology /hydraulic conductivity/HK/HK layer4.tif")
layer_five_K = raster(x = "/Users/amanda_triplett/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Hydrogeology /hydraulic conductivity/HK/HK layer5.tif")
val1 = sort(unique(layer_one_K)) #get a list of unique k-values
val2 = sort(unique(layer_two_K))
val3 = sort(unique(layer_three_K))
val4 = sort(unique(layer_four_K))
val5 = sort(unique(layer_five_K))
int1 = matrix(0,548,404) #create a matrix that's same dim as domain
int2 = matrix(0,548,404)
int3 = matrix(0,548,404)
int4 = matrix(0,548,404)
int5 = matrix(0,548,404)
for (n in 1:length(val1)){ #loops 33 times through all unique k-values
#int[as.matrix(layer_one_K) == val[n]] = n
temp = which(as.matrix(layer_one_K) == val1[n]) ##which cells of layer 1 = current k value, gives boolean true
int1[temp] = n ##current temp (all cells that = current n) added to int matrix
}
for (n in 1:length(val2)){ #loops 33 times through all unique k-values
#int[as.matrix(layer_one_K) == val[n]] = n
temp = which(as.matrix(layer_two_K) == val2[n]) ##which cells of layer 1 = current k value, gives boolean true
int2[temp] = n ##current temp (all cells that = current n) added to int matrix
}
for (n in 1:length(val3)){ #loops 33 times through all unique k-values
#int[as.matrix(layer_one_K) == val[n]] = n
temp = which(as.matrix(layer_three_K) == val3[n]) ##which cells of layer 1 = current k value, gives boolean true
int3[temp] = n ##current temp (all cells that = current n) added to int matrix
}
for (n in 1:length(val4)){ #loops 33 times through all unique k-values
#int[as.matrix(layer_one_K) == val[n]] = n
temp = which(as.matrix(layer_four_K) == val4[n]) ##which cells of layer 1 = current k value, gives boolean true
int4[temp] = n ##current temp (all cells that = current n) added to int matrix
}
for (n in 1:length(val5)){ #loops 33 times through all unique k-values
#int[as.matrix(layer_one_K) == val[n]] = n
temp = which(as.matrix(layer_five_K) == val5[n]) ##which cells of layer 1 = current k value, gives boolean true
int5[temp] = n ##current temp (all cells that = current n) added to int matrix
}
View(int5)
for (n in 1:length(val1)){
summary[n,1:2] = layer_one_K - layer_one_K[int == n]
# print(range(temp2))
}
##Check
summary = matrix(0,33,10)
for (n in 1:length(val1)){
summary[n,1:2] = layer_one_K - layer_one_K[int == n]
# print(range(temp2))
}
for (n in 1:length(val1)){
summary[n,1] = layer_one_K - layer_one_K[int == n]
# print(range(temp2))
}
val1
val2
val 3
val3
val4
val5
sort(unique(val1,val2,val3,val4,val5))
sort(unique(c(val1,val2,val3,val4,val5)))
all_vals = sort(unique(c(val1,val2,val3,val4,val5)))
plot(int1)
int1
for (n in 1:length(val1)){
temp = layer_one_K - layer_one_K[int == n]
print(range(temp))
}
for (n in 1:length(val1)){
temp = layer_one_K - int1[int == n]
print(range(temp))
}
View(temp)
all_vals = sort(unique(c(val1,val2,val3,val4,val5)))
for (n in 1:length(all_vals)){ #loops 33 times through all unique k-values
#int[as.matrix(layer_one_K) == val[n]] = n
temp = which(as.matrix(layer_one_K) == all_vals[n]) ##which cells of layer 1 = current k value, gives boolean true
int1[temp] = n ##current temp (all cells that = current n) added to int matrix
}
View(int1)
raster(int1)
plot(int1)
depth = c(.05, .25,.7,1.5,12,seq(12,580,10))#depth to cell center
depth
depth = c(.05, .25,.7,1.5,seq(12,600,10))#depth to cell center
depth
vardz_list
vardz_list = c(.1,.3,.6,1,rep(20,30)) #cut offs for layers in z
vardz_list
depth = c(.05, .25,.7,1.5,seq(12,602,10))#depth to cell center
depth
all_k_layers = array(548,404,c(int1,int2,int3,int4,int5))
?array
depth = c(.05, .25,.7,1.5,seq(12,602,20))#depth to cell center
depth
depth = c(.05, .25,.7,1.5,seq(12,592,20))#depth to cell center
depth
library(abind)
?list
intermediate_list = list(int1, int2, int3, int4, int5)
?abind
all_k_layers = abind(intermediate_list, along = 3)
dim(all_k_layers)
library(rgdal)
setwd("~/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/River/river_Data_new")
river_mask = readOGR(dsn = ".", layer = "SFR.shp")
river_mask = readOGR(layer = "SFR.shp")
river_mask = readOGR(dsn = "SFR.shp")
View(river_mask)
View(river_mask)
river_mask@data[["ISEG"]]
river_mask@data[["Slope"]]
river_mask@data[["BedThick"]]
setwd("~/Documents/Heihe_Basin_Project/Heiflow_data/home/eseftp/Heihe_River_Basin/GIS/Model/Grid")
model_grid = readOGR(dsn = "Model_Grid.shp")
load.image(file = "indicator_file_output.RData")
setwd("~/Documents/Heihe_Basin_Project/Heihe_R/data_output")
load.image(file = "indicator_file_output.RData")
load(file = "indicator_file_output.RData")
domain_mask = pf_kint_map[,,1]
View(domain_mask)
domain_mask_test = array(0,dim = c(ny,nx,1))
library(raster)
setwd("~/Documents/Heihe_Basin_Project/Heihe_R/data_output")
shp2raster <- function(shp, mask.raster, label, value, transform = FALSE, proj.from = NA,
proj.to = NA, map = TRUE) {
require(raster, rgdal)
# use transform==TRUE if the polygon is not in the same coordinate system as
# the output raster, setting proj.from & proj.to to the appropriate
# projections
if (transform == TRUE) {
proj4string(shp) <- proj.from
shp <- spTransform(shp, proj.to)
}
# convert the shapefile to a raster based on a standardised background
# raster
r <- rasterize(shp, mask.raster)
# set the cells associated with the shapfile to the specified value
r[!is.na(r)] <- value
# merge the new raster with the mask raster and export to the working
# directory as a tif file
r <- mask(merge(r, mask.raster), mask.raster, filename = label, format = "GTiff",
overwrite = T)
# plot map of new raster
if (map == TRUE) {
plot(r, main = label, axes = F, box = F)
}
names(r) <- label
return(r)
}
river_mask_test = shp2raster(river_mask, domain_mask, "river vals", 1)
river_mask_test = shp2raster(river_mask, hf_geo1, "river vals", 1)
View(river_mask_test)
r <- rasterize(river_mask, hf_geo1)
View(r)
plot(r, main = label, axes = F, box = F)
plot(r, main = "River Mask", axes = F, box = F)
View(r)
river_mask_test1 = r
river_mast_test1[!is.na(r)] = 1
river_mask_test1[!is.na(r)] = 1
plot(river_mask_test1, main = "River Mask", axes = F, box = F)
View(river_mask_test1)
river_mask_test1[is.na(r)] = 0
plot(river_mask_test1, main = "River Mask", axes = F, box = F)
writeRaster(temprast, 'river_mask.tif', format='GTiff', overwrite=T)
r <- rasterize(river_mask, hf_geo1)
river_mask_rast = r
river_mask_test1[!is.na(r)] = 1
river_mask_rast[!is.na(r)] = 1
river_mask_rast[is.na(r)] = 0
writeRaster(river_mask_rast, 'river_mask.tif', format='GTiff', overwrite=T)
r <- rasterize(model_grid, hf_geo1)
model_grid_rast = r
model_grid_rast = r
model_grid_rast[!is.na(r)] = 1
model_grid_rast[is.na(r)] = 0
writeRaster(model_grid_rast, 'river_mask.tif', format='GTiff', overwrite=T)
plot(model_grid_rast, main = "River Mask", axes = F, box = F)
r <- rasterize(river_mask, hf_geo1)
river_mask_rast = r
river_mask_rast[!is.na(r)] = 1
river_mask_rast[is.na(r)] = 0
writeRaster(river_mask_rast, 'river_mask.tif', format='GTiff', overwrite=T)
plot(river_mask_test1, main = "River Mask", axes = F, box = F)
r <- rasterize(model_grid, hf_geo1)
model_grid_rast = r
model_grid_rast[!is.na(r)] = 1
model_grid_rast[is.na(r)] = 0
writeRaster(model_grid_rast, 'domain_mask.tif', format='GTiff', overwrite=T)
plot(model_grid_rast, main = "Domain Mask", axes = F, box = F)
plot(river_mask_rast, main = "River Mask", axes = F, box = F)
View(river_mask_rast)
install.packages("metR")
